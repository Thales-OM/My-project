//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Player/Input_Manager/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace UnityEngine.InputSystem
{
    public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""ab8cede5-f432-4cd1-b1e3-020034dc8506"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""fcd6b544-87e0-426c-92e8-cf9557e1edb6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""4b4151ae-0fa5-47fe-8536-6105a981983d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""7359a10a-4d90-4e55-941a-1aa6ceb145c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""d5b2d282-ae59-4dfe-9a7b-6933b002ab06"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Control_Scheme"",
                    ""type"": ""Button"",
                    ""id"": ""1955eb78-91d4-40bd-bb25-7a3f0120220b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse_Input"",
                    ""type"": ""Value"",
                    ""id"": ""bce29c50-28bf-42ef-8c71-ab2c4f35b23e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Left_Right"",
                    ""id"": ""1afa641f-f5e4-43f1-b88b-3a71af64bfef"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d5d89759-d383-4319-9fe7-83db2c01aff7"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2977857c-635e-4682-a270-47972921f3db"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left_Right"",
                    ""id"": ""47885da2-2c00-4407-b2a6-c7f2a2e30216"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""cc04f1c1-a99b-4d31-81bd-96c11a5cbfae"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""93d9b0e2-15a0-443b-9a4a-28ebfb48ea28"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a66631d5-89d2-45a3-996d-4c462e689d02"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4cc7c0c-b563-4649-8a8e-2fae5edf7e32"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a636986e-61d9-4626-9498-ce4d1a15d954"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74cccdf8-df78-4385-83c5-13aee06e1c03"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33818593-4d7b-4f78-866a-e018007f30ce"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94c9dcdc-1284-4ec4-b7ed-4fb19032aeac"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18171c41-9035-4bfe-949c-86c23db3407f"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad;Keyboard"",
                    ""action"": ""Control_Scheme"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3eb8d0c-e29e-4556-bac9-9c6cc652ae90"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard;Gamepad"",
                    ""action"": ""Control_Scheme"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4980261-ff2c-4003-81b0-da5ce857bc82"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Mouse_Input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Default
            m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
            m_Default_Movement = m_Default.FindAction("Movement", throwIfNotFound: true);
            m_Default_Jump = m_Default.FindAction("Jump", throwIfNotFound: true);
            m_Default_Dash = m_Default.FindAction("Dash", throwIfNotFound: true);
            m_Default_Attack = m_Default.FindAction("Attack", throwIfNotFound: true);
            m_Default_Control_Scheme = m_Default.FindAction("Control_Scheme", throwIfNotFound: true);
            m_Default_Mouse_Input = m_Default.FindAction("Mouse_Input", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Default
        private readonly InputActionMap m_Default;
        private IDefaultActions m_DefaultActionsCallbackInterface;
        private readonly InputAction m_Default_Movement;
        private readonly InputAction m_Default_Jump;
        private readonly InputAction m_Default_Dash;
        private readonly InputAction m_Default_Attack;
        private readonly InputAction m_Default_Control_Scheme;
        private readonly InputAction m_Default_Mouse_Input;
        public struct DefaultActions
        {
            private @PlayerInputActions m_Wrapper;
            public DefaultActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Default_Movement;
            public InputAction @Jump => m_Wrapper.m_Default_Jump;
            public InputAction @Dash => m_Wrapper.m_Default_Dash;
            public InputAction @Attack => m_Wrapper.m_Default_Attack;
            public InputAction @Control_Scheme => m_Wrapper.m_Default_Control_Scheme;
            public InputAction @Mouse_Input => m_Wrapper.m_Default_Mouse_Input;
            public InputActionMap Get() { return m_Wrapper.m_Default; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
            public void SetCallbacks(IDefaultActions instance)
            {
                if (m_Wrapper.m_DefaultActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMovement;
                    @Jump.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJump;
                    @Dash.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnDash;
                    @Dash.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnDash;
                    @Dash.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnDash;
                    @Attack.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAttack;
                    @Attack.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAttack;
                    @Attack.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAttack;
                    @Control_Scheme.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnControl_Scheme;
                    @Control_Scheme.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnControl_Scheme;
                    @Control_Scheme.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnControl_Scheme;
                    @Mouse_Input.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMouse_Input;
                    @Mouse_Input.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMouse_Input;
                    @Mouse_Input.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnMouse_Input;
                }
                m_Wrapper.m_DefaultActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @Dash.started += instance.OnDash;
                    @Dash.performed += instance.OnDash;
                    @Dash.canceled += instance.OnDash;
                    @Attack.started += instance.OnAttack;
                    @Attack.performed += instance.OnAttack;
                    @Attack.canceled += instance.OnAttack;
                    @Control_Scheme.started += instance.OnControl_Scheme;
                    @Control_Scheme.performed += instance.OnControl_Scheme;
                    @Control_Scheme.canceled += instance.OnControl_Scheme;
                    @Mouse_Input.started += instance.OnMouse_Input;
                    @Mouse_Input.performed += instance.OnMouse_Input;
                    @Mouse_Input.canceled += instance.OnMouse_Input;
                }
            }
        }
        public DefaultActions @Default => new DefaultActions(this);
        private int m_KeyboardSchemeIndex = -1;
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        public interface IDefaultActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnDash(InputAction.CallbackContext context);
            void OnAttack(InputAction.CallbackContext context);
            void OnControl_Scheme(InputAction.CallbackContext context);
            void OnMouse_Input(InputAction.CallbackContext context);
        }
    }
}
